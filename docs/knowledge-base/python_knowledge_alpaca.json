[
  {
    "instruction": "Explain what Python is and why it's popular for programming.",
    "input": "",
    "output": "Python is a high-level, interpreted programming language known for its simple and readable syntax. It's popular because:\n\n1. **Easy to Learn**: Clean, readable syntax that resembles English\n2. **Versatile**: Used for web development, data science, AI, automation, and more\n3. **Large Community**: Extensive libraries and frameworks available\n4. **Cross-platform**: Runs on Windows, macOS, and Linux\n5. **Powerful Libraries**: NumPy, Pandas, TensorFlow, Django, Flask, etc.\n\nPython emphasizes code readability and allows programmers to express concepts in fewer lines of code compared to other languages."
  },
  {
    "instruction": "How do you create and use variables in Python?",
    "input": "",
    "output": "In Python, variables are created by simply assigning a value to a name. No declaration is needed:\n\n```python\n# Creating variables\nname = \"Alice\"          # String\nage = 25                # Integer\nheight = 5.6           # Float\nis_student = True      # Boolean\n\n# Using variables\nprint(f\"Hello, {name}!\")\nprint(f\"Age: {age}, Height: {height}\")\n\n# Variables can change type\nage = \"twenty-five\"    # Now it's a string\n```\n\n**Variable Rules:**\n- Must start with letter or underscore\n- Can contain letters, numbers, underscores\n- Case-sensitive (age â‰  Age)\n- Cannot use Python keywords (if, for, class, etc.)"
  },
  {
    "instruction": "What are Python data types and how do you use them?",
    "input": "",
    "output": "Python has several built-in data types:\n\n**Basic Types:**\n```python\n# Numbers\ninteger = 42\nfloat_num = 3.14\ncomplex_num = 2 + 3j\n\n# Text\nstring = \"Hello World\"\n\n# Boolean\nis_true = True\nis_false = False\n```\n\n**Collection Types:**\n```python\n# List (mutable, ordered)\nfruits = [\"apple\", \"banana\", \"orange\"]\n\n# Tuple (immutable, ordered)\ncoordinates = (10, 20)\n\n# Dictionary (key-value pairs)\nperson = {\"name\": \"John\", \"age\": 30}\n\n# Set (unique elements)\nunique_numbers = {1, 2, 3, 4}\n```\n\n**Type Checking:**\n```python\nprint(type(42))          # <class 'int'>\nprint(isinstance(42, int))  # True\n```"
  },
  {
    "instruction": "How do you write functions in Python?",
    "input": "",
    "output": "Functions in Python are defined using the `def` keyword:\n\n**Basic Function:**\n```python\ndef greet(name):\n    \"\"\"A simple greeting function\"\"\"\n    return f\"Hello, {name}!\"\n\n# Call the function\nmessage = greet(\"Alice\")\nprint(message)  # Hello, Alice!\n```\n\n**Function with Multiple Parameters:**\n```python\ndef calculate_area(length, width=1):\n    \"\"\"Calculate area with default width\"\"\"\n    return length * width\n\narea1 = calculate_area(5, 3)  # 15\narea2 = calculate_area(5)     # 5 (uses default width)\n```\n\n**Function with Variable Arguments:**\n```python\ndef sum_numbers(*args):\n    \"\"\"Sum any number of arguments\"\"\"\n    return sum(args)\n\nresult = sum_numbers(1, 2, 3, 4, 5)  # 15\n```\n\n**Lambda Functions:**\n```python\nsquare = lambda x: x ** 2\nprint(square(5))  # 25\n```"
  },
  {
    "instruction": "How do you work with lists in Python?",
    "input": "",
    "output": "Lists are ordered, mutable collections in Python:\n\n**Creating and Accessing Lists:**\n```python\n# Create a list\nfruits = [\"apple\", \"banana\", \"orange\"]\nnumbers = [1, 2, 3, 4, 5]\n\n# Access elements (0-indexed)\nfirst_fruit = fruits[0]     # \"apple\"\nlast_number = numbers[-1]   # 5 (negative indexing)\n```\n\n**Modifying Lists:**\n```python\n# Add elements\nfruits.append(\"grape\")           # Add to end\nfruits.insert(1, \"kiwi\")         # Insert at index 1\n\n# Remove elements\nfruits.remove(\"banana\")          # Remove by value\npopped = fruits.pop()            # Remove and return last\ndel fruits[0]                    # Remove by index\n```\n\n**List Operations:**\n```python\n# Slicing\nsublist = numbers[1:4]           # [2, 3, 4]\n\n# List comprehension\nsquares = [x**2 for x in range(5)]  # [0, 1, 4, 9, 16]\n\n# Useful methods\nlen(fruits)                      # Length\nfruits.sort()                    # Sort in place\nfruits.reverse()                 # Reverse in place\n```"
  },
  {
    "instruction": "How do you handle errors and exceptions in Python?",
    "input": "",
    "output": "Python uses try/except blocks to handle errors gracefully:\n\n**Basic Exception Handling:**\n```python\ntry:\n    number = int(input(\"Enter a number: \"))\n    result = 10 / number\n    print(f\"Result: {result}\")\nexcept ValueError:\n    print(\"Invalid input! Please enter a number.\")\nexcept ZeroDivisionError:\n    print(\"Cannot divide by zero!\")\n```\n\n**Multiple Exceptions:**\n```python\ntry:\n    # Some risky operation\n    pass\nexcept (ValueError, TypeError) as e:\n    print(f\"Error occurred: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\nfinally:\n    print(\"This always runs\")\n```\n\n**Raising Custom Exceptions:**\n```python\ndef validate_age(age):\n    if age < 0:\n        raise ValueError(\"Age cannot be negative\")\n    if age > 150:\n        raise ValueError(\"Age seems unrealistic\")\n    return True\n\ntry:\n    validate_age(-5)\nexcept ValueError as e:\n    print(f\"Validation error: {e}\")\n```"
  },
  {
    "instruction": "How do you work with files in Python?",
    "input": "",
    "output": "Python provides built-in functions for file operations:\n\n**Reading Files:**\n```python\n# Read entire file\nwith open('data.txt', 'r') as file:\n    content = file.read()\n    print(content)\n\n# Read line by line\nwith open('data.txt', 'r') as file:\n    for line in file:\n        print(line.strip())  # strip() removes newlines\n\n# Read all lines into a list\nwith open('data.txt', 'r') as file:\n    lines = file.readlines()\n```\n\n**Writing Files:**\n```python\n# Write to file (overwrites existing)\nwith open('output.txt', 'w') as file:\n    file.write(\"Hello, World!\\n\")\n    file.write(\"Second line\")\n\n# Append to file\nwith open('output.txt', 'a') as file:\n    file.write(\"\\nAppended line\")\n```\n\n**Working with JSON:**\n```python\nimport json\n\n# Write JSON\ndata = {\"name\": \"Alice\", \"age\": 30}\nwith open('data.json', 'w') as file:\n    json.dump(data, file, indent=2)\n\n# Read JSON\nwith open('data.json', 'r') as file:\n    loaded_data = json.load(file)\n```"
  },
  {
    "instruction": "How do you create and use classes in Python?",
    "input": "",
    "output": "Classes in Python are created using the `class` keyword:\n\n**Basic Class:**\n```python\nclass Person:\n    def __init__(self, name, age):\n        \"\"\"Constructor method\"\"\"\n        self.name = name\n        self.age = age\n    \n    def greet(self):\n        \"\"\"Instance method\"\"\"\n        return f\"Hi, I'm {self.name}\"\n    \n    def have_birthday(self):\n        \"\"\"Method that modifies state\"\"\"\n        self.age += 1\n        return f\"{self.name} is now {self.age}\"\n\n# Create instances\nperson1 = Person(\"Alice\", 25)\nperson2 = Person(\"Bob\", 30)\n\nprint(person1.greet())        # Hi, I'm Alice\nprint(person1.have_birthday()) # Alice is now 26\n```\n\n**Inheritance:**\n```python\nclass Student(Person):\n    def __init__(self, name, age, student_id):\n        super().__init__(name, age)  # Call parent constructor\n        self.student_id = student_id\n    \n    def study(self, subject):\n        return f\"{self.name} is studying {subject}\"\n\nstudent = Student(\"Charlie\", 20, \"S12345\")\nprint(student.greet())           # Inherited method\nprint(student.study(\"Python\"))   # Student-specific method\n```"
  },
  {
    "instruction": "How do you import and use modules in Python?",
    "input": "",
    "output": "Python modules allow you to organize and reuse code:\n\n**Basic Imports:**\n```python\n# Import entire module\nimport math\nprint(math.pi)          # 3.141592653589793\nprint(math.sqrt(16))    # 4.0\n\n# Import specific functions\nfrom math import pi, sqrt\nprint(pi)               # 3.141592653589793\nprint(sqrt(25))         # 5.0\n\n# Import with alias\nimport numpy as np\narray = np.array([1, 2, 3])\n```\n\n**Common Standard Library Modules:**\n```python\n# Date and time\nfrom datetime import datetime, date\nnow = datetime.now()\ntoday = date.today()\n\n# Random numbers\nimport random\nrandom_num = random.randint(1, 10)\nrandom_choice = random.choice([\"apple\", \"banana\", \"orange\"])\n\n# Operating system interface\nimport os\ncurrent_dir = os.getcwd()\nos.listdir('.')         # List files in current directory\n```\n\n**Creating Your Own Module:**\n```python\n# Save as my_module.py\ndef add_numbers(a, b):\n    return a + b\n\nPI = 3.14159\n\n# In another file\nimport my_module\nresult = my_module.add_numbers(5, 3)\nprint(my_module.PI)\n```"
  },
  {
    "instruction": "What are Python loops and how do you use them?",
    "input": "",
    "output": "Python has two main types of loops: `for` and `while`:\n\n**For Loops:**\n```python\n# Loop through a list\nfruits = [\"apple\", \"banana\", \"orange\"]\nfor fruit in fruits:\n    print(f\"I like {fruit}\")\n\n# Loop with range\nfor i in range(5):          # 0, 1, 2, 3, 4\n    print(f\"Number: {i}\")\n\nfor i in range(2, 8, 2):    # 2, 4, 6 (start, stop, step)\n    print(i)\n\n# Loop with enumerate (get index and value)\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")\n```\n\n**While Loops:**\n```python\n# Basic while loop\ncount = 0\nwhile count < 5:\n    print(f\"Count: {count}\")\n    count += 1\n\n# While loop with user input\nuser_input = \"\"\nwhile user_input.lower() != \"quit\":\n    user_input = input(\"Enter 'quit' to exit: \")\n    print(f\"You entered: {user_input}\")\n```\n\n**Loop Control:**\n```python\nfor i in range(10):\n    if i == 3:\n        continue    # Skip this iteration\n    if i == 7:\n        break      # Exit the loop\n    print(i)\n```"
  },
  {
    "instruction": "How do you work with dictionaries in Python?",
    "input": "",
    "output": "Dictionaries store key-value pairs and are very useful for organizing data:\n\n**Creating and Accessing Dictionaries:**\n```python\n# Create a dictionary\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\n# Access values\nname = person[\"name\"]           # \"Alice\"\nage = person.get(\"age\", 0)      # 30 (with default)\ncity = person.get(\"country\", \"Unknown\")  # \"Unknown\" (key doesn't exist)\n```\n\n**Modifying Dictionaries:**\n```python\n# Add or update values\nperson[\"job\"] = \"Engineer\"      # Add new key-value\nperson[\"age\"] = 31             # Update existing value\n\n# Remove items\ndel person[\"city\"]             # Remove key-value pair\njob = person.pop(\"job\", None)   # Remove and return value\n```\n\n**Dictionary Operations:**\n```python\n# Get all keys, values, or items\nkeys = person.keys()           # dict_keys(['name', 'age'])\nvalues = person.values()       # dict_values(['Alice', 31])\nitems = person.items()         # dict_items([('name', 'Alice'), ('age', 31)])\n\n# Loop through dictionary\nfor key, value in person.items():\n    print(f\"{key}: {value}\")\n\n# Check if key exists\nif \"name\" in person:\n    print(\"Name is in the dictionary\")\n```"
  },
  {
    "instruction": "How do you install and use Python packages with pip?",
    "input": "",
    "output": "pip is Python's package installer for managing external libraries:\n\n**Basic pip Commands:**\n```bash\n# Install a package\npip install requests\n\n# Install specific version\npip install numpy==1.21.0\n\n# Install from requirements file\npip install -r requirements.txt\n\n# Upgrade a package\npip install --upgrade pandas\n\n# Uninstall a package\npip uninstall matplotlib\n```\n\n**Managing Dependencies:**\n```bash\n# List installed packages\npip list\n\n# Show package information\npip show requests\n\n# Generate requirements file\npip freeze > requirements.txt\n\n# Install in development mode\npip install -e .\n```\n\n**Using Virtual Environments:**\n```bash\n# Create virtual environment\npython -m venv my_project_env\n\n# Activate (Windows)\nmy_project_env\\Scripts\\activate\n\n# Activate (Mac/Linux)\nsource my_project_env/bin/activate\n\n# Deactivate\ndeactivate\n```\n\n**Popular Python Packages:**\n- `requests` - HTTP library\n- `numpy` - Numerical computing\n- `pandas` - Data manipulation\n- `matplotlib` - Plotting\n- `flask/django` - Web frameworks"
  }
]
