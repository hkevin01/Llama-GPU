name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install Python audit tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit bandit
      - name: Run pip-audit
        run: pip-audit -r requirements.txt
      - name: Run bandit security scan
        run: bandit -r src/ tests/
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install Node audit tools
        run: npm install
      - name: Run npm audit
        run: npm audit --audit-level=moderate
      - name: Run eslint security scan
        run: npx eslint src/ --max-warnings=0
      - name: Upload security audit logs
        run: |
          mkdir -p logs
          cp bandit.json logs/security_bandit.json || true
          cp npm-debug.log logs/npm_audit.log || true
          cp pip-audit.log logs/pip_audit.log || true
        if: always()
      - name: Upload logs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-logs
          path: logs/

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=xml | tee logs/test_output.log
      - name: Upload test output log
        uses: actions/upload-artifact@v4
        with:
          name: test-output-log
          path: logs/test_output.log

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Lint with flake8
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check src/ tests/

      - name: Check import sorting with isort
        run: |
          isort --check-only src/ tests/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

  gpu-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]
        backend: [cpu, cuda, rocm]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run backend tests
        run: |
          pytest tests/ --backend=${{ matrix.backend }} | tee logs/gpu_test_output.log
      - name: Upload GPU test output log
        uses: actions/upload-artifact@v4
        with:
          name: gpu-test-output-log
          path: logs/gpu_test_output.log

  node-lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm install
      - name: Run lint
        run: npm run lint
      - name: Run tests
        run: npm run test | tee logs/node_test_output.log
      - name: Upload Node test output log
        uses: actions/upload-artifact@v4
        with:
          name: node-test-output-log
          path: logs/node_test_output.log

  docs-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install Sphinx and MkDocs
        run: |
          python -m pip install --upgrade pip
          pip install sphinx mkdocs
      - name: Build Sphinx docs
        run: |
          cd docs
          sphinx-apidoc -o source ../src
          make html
      - name: Build MkDocs docs
        run: |
          mkdocs build
      - name: Upload built docs
        uses: actions/upload-artifact@v4
        with:
          name: built-docs
          path: docs/_build/html

  deploy-simulate:
    runs-on: ubuntu-latest
    needs: [build, gpu-test, node-lint-test, docs-build]
    strategy:
      matrix:
        cloud: [aws, azure, gcp]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Simulate cloud deploy
        run: bash scripts/deploy_cloud.sh ${{ matrix.cloud }} src/backend/model.pt
